<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>



<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs" encoding="UTF8"#>

 <#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"DocumentationModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "DynamicQuery.Entity.Documentation"; //code.VsNamespaceSuggestion();

MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);

Dictionary <string,string> DataTypes=new Dictionary<string,string>()
{
    {"varbinary","Byte[]"},{"binary","Byte[]"},{"text","String"},{"int32","int"},{"byte","bool"},{"string","string"},
	{"boolean","bool"},{"double","float"},{"bit","bool"},{"int","int"},{"bigint","long"},{"bool","bool"},{"decimal","decimal"},
    {"nvarchar","String"},{"smallint","Byte"},{"datetime","DateTime"},{"Nullable<System.DateTime>","DateTime"}
};

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

fileManager.StartNewFile("Database.cs");
BeginNamespace(namespaceName, code);
#>
public partial class Database : DynamicQueryDatabase
{
	public <#=code.Escape("Database")#>() : base()
	{
<#
		PushIndent(CodeRegion.GetIndent(1));
#>
	// Tablak, mezok es kapcsolatok
<#
foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var primitiveProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity);
#>	
	this.Tables.Add(new DynamicQueryTable("<#=code.Escape(entity)#>")
	{
<#
		PushIndent(CodeRegion.GetIndent(1));
#>
		Columns = new List<DynamicQueryTableColumn>()
				  {
<#
					if (primitiveProperties.Any())
					{
						PushIndent(CodeRegion.GetIndent(5));
						foreach (var edmProperty in primitiveProperties)
						{
							WriteProperty(code,edmProperty,entity.Name,DataTypes);
						}
						PopIndent();						
					}
#>
                  },
<#
		if(collectionNavigationProperties.Any())
        {
#>
		Associations = new List<DynamicQueryTableAssociation>()
					   {
<#
							PushIndent(CodeRegion.GetIndent(6));
							foreach (var navigationProperty in collectionNavigationProperties)
							{
								WriteNavigationProperty(code, navigationProperty, metadataWorkspace);
							}
							PopIndent();
#>
                       }			
<#                                                       
		}
		PopIndent();
#>
	});	
<#
}
#>
} // konstruktor end
<#
PopIndent();
#>
}// class end	
<#
    EndNamespace(namespaceName);
#>
} // namespace end
<#

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
<#+
    }
}

public FieldInfo GetFieldBelongingToProperty(Type targetType, string propertyName)
{
    FieldInfo fld;
    FieldInfo[] allFields = targetType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);

    // the rules: the field must match the ending of the propertyname. So underscore is okay
    fld = allFields.SingleOrDefault(field => field.Name.EndsWith(propertyName, StringComparison.OrdinalIgnoreCase));

    // in case that didn't match, try the autogenerated fieldname
    if (fld == null)
    {
        fld = allFields.SingleOrDefault(field => (field.Name.IndexOf("<" + propertyName + ">") == 0));
    }

    return fld;
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty, string tableName, Dictionary <string,string> DataTypes)
{
	string descriptiontoSQLQuery = edmProperty.Documentation == null ? "" : edmProperty.Documentation.Summary;
	if(descriptiontoSQLQuery == "") 
	{
		descriptiontoSQLQuery = code.Escape(edmProperty);
	}

	/*string a = "";
	for(int i = 0; i < edmProperty.TypeUsage.Facets.Count(); i++) {
		a += edmProperty.TypeUsage.Facets[i].Name + ",";
	}*/

	int? length = null;
	int precision = 0;
	int scale = 0;
	if(edmProperty.TypeUsage.Facets.Contains("MaxLength")) {
		length = (int)(edmProperty.TypeUsage.Facets["MaxLength"].Value);
	}
	if (edmProperty.TypeUsage.EdmType.Name == PrimitiveTypeKind.Decimal.ToString() || edmProperty.TypeUsage.EdmType.Name == PrimitiveTypeKind.Double.ToString())
	{
		if(edmProperty.TypeUsage.Facets.Contains("Precision")) {
			int.TryParse(edmProperty.TypeUsage.Facets["Precision"].Value.ToString(), out precision);
		}
		if(edmProperty.TypeUsage.Facets.Contains("Scale")) {
			int.TryParse(edmProperty.TypeUsage.Facets["Scale"].Value.ToString(), out scale);
		}
	}

	WriteProperty(Accessibility.ForProperty(edmProperty), 
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)),
				  edmProperty.Documentation == null ? "" : edmProperty.Documentation.Summary,
				  edmProperty.Documentation == null ? "" : edmProperty.Documentation.LongDescription,
				  tableName,
				  descriptiontoSQLQuery,
				  edmProperty.Documentation == null,
				  DataTypes.ContainsKey(edmProperty.TypeUsage.ToString().Substring(4).ToLower()) ? DataTypes[edmProperty.TypeUsage.ToString().Substring(4).ToLower()] : edmProperty.TypeUsage.ToString(),
				  length,
				  precision,
				  scale
				  );
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility, string summary, string longDescription, string tableName, string descriptiontoSQLQuery, bool warningDocumentationIsNull, string dataType,int? length, int precision,	int scale = 0)
{
	summary = summary.Replace(@"\r\n",@"");
	descriptiontoSQLQuery = descriptiontoSQLQuery.Replace(@"/",@"_");
	
	if(warningDocumentationIsNull) 
	{
#>
	// Documentation is null on this field, please check it
<#+
	}

	if(length.HasValue) 
	{
#>
	new DynamicQueryTableColumn(){ Name = "<#=name#>", Description = "<#=summary#>", ColumnType = "<#=dataType#>", Length = <#=length.Value#>  },
<#+
	}
	else if(precision > 0) 
	{
#>
	new DynamicQueryTableColumn(){ Name = "<#=name#>", Description = "<#=summary#>", ColumnType  = "<#=dataType#>", Length = <#=precision#>, DecimalLength = <#=scale#>  },
<#+
	}
	else 
	{
#>
	new DynamicQueryTableColumn(){ Name = "<#=name#>", Description = "<#=summary#>", ColumnType  = "<#=dataType#>" },
<#+
	}
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty, MetadataWorkspace metadataWorkspace)
{
	var association = metadataWorkspace.GetItems<AssociationType>(DataSpace.SSpace).Single(a => a.Name == navigationProperty.RelationshipType.Name);
	var toColumns = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.ToProperties));
	var toTable = String.Join(",", association.ReferentialConstraints[0].ToRole);
	var fromColumns = String.Join(",", association.ReferentialConstraints.SelectMany(rc => rc.FromProperties));
	var fromTable = String.Join(",", association.ReferentialConstraints[0].FromRole);


	WriteNavigationProperty(toTable, toColumns, fromTable, fromColumns, association.Name);
}

void WriteNavigationProperty(string toTable, string toColumns, string fromTable, string fromColumns, string associationName)
{
#>
	new DynamicQueryTableAssociation() { Name = "<#=associationName#>", ForeignKeyColumn = "<#=toColumns#>", ForeignKeyTable = "<#=toTable#>", PrimaryKeyColumn = "<#=fromColumns#>", PrimaryKeyTable = "<#=fromTable#>" },
<#+
}


string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>
